type EvmStrategy = record {
  strategy_id : nat32;
  config_str : text;
  chain_id : nat64;
  contract_address : text;
};
type Proposal = record {
  id : nat32;
  title : text;
  date_created : nat32;
  mechanism : nat32;
  description : text;
  options : vec ProposalOption;
  space_id : nat32;
};
type ProposalOption = record {
  id : nat32;
  votes : vec ProposalOptionVote;
  name : text;
  on_win_contract_address : text;
  proposal_id : nat32;
  on_win_bytecode : text;
  on_win_chain_id : nat32;
};
type ProposalOptionVote = record {
  id : nat32;
  signature : text;
  vote_type : nat32;
  option_id : nat32;
  user_address : text;
  timestamp : nat64;
  voting_power : nat;
};
type Result = variant { Ok : nat; Err : text };
type Space = record {
  id : nat32;
  vote_delay : nat32;
  vote_duration : nat32;
  name : text;
  website_link : text;
  icon_link : text;
  min_vote_role : nat32;
  min_vote_power : nat;
  proposals : vec Proposal;
  quorum : nat32;
  strategies : vec Strategy;
};
type Strategy = record {
  id : nat32;
  name : text;
  description : text;
  evm_strategy : opt EvmStrategy;
  space_id : nat32;
};
type VoteData = record { signature : text; message : VoteMessage };
type VoteMessage = record {
  option_id : nat32;
  address : text;
  proposal_id : nat32;
  block_height : opt text;
  space_id : nat32;
};
service : {
  delete_proposal : (nat32, nat32) -> (opt Proposal);
  delete_proposal_option : (nat32, nat32, nat32) -> (opt ProposalOption);
  delete_space : (nat32) -> (opt Space);
  delete_strategy : (nat32, nat32) -> (opt Strategy);
  delete_vote : (nat32, nat32, nat32, nat32) -> (opt ProposalOptionVote);
  get_proposal : (nat32, nat32) -> (opt Proposal) query;
  get_proposal_option : (nat32, nat32, nat32) -> (opt ProposalOption) query;
  get_proposal_options : (nat32, nat32) -> (opt vec ProposalOption) query;
  get_proposals : (nat32) -> (opt vec Proposal) query;
  get_space : (nat32) -> (opt Space) query;
  get_spaces : () -> (opt vec Space) query;
  get_strategies : (nat32) -> (opt vec Strategy) query;
  get_strategy : (nat32, nat32) -> (opt Strategy) query;
  get_vote : (nat32, nat32, nat32, nat32) -> (opt ProposalOptionVote) query;
  get_votes : (nat32, nat32, nat32) -> (opt vec ProposalOptionVote) query;
  insert_evm_strategy : (nat32, nat32, text, text, EvmStrategy) -> (
      opt Strategy,
    );
  insert_proposal : (nat32, text, text, nat32, nat32) -> (opt Proposal);
  insert_proposal_option : (nat32, nat32, text, text, text, nat32) -> (
      opt ProposalOption,
    );
  insert_space : (text, text, text, nat32, nat32, nat32, nat, nat32) -> (Space);
  insert_vote : (nat32, nat32, nat32, text, nat32, nat64, text, nat) -> (
      opt ProposalOption,
    );
  update_evm_strategy : (nat32, nat32, text, text, EvmStrategy) -> (
      opt Strategy,
    );
  update_proposal : (nat32, nat32, text, text, nat32, nat32) -> (opt Proposal);
  update_proposal_option : (nat32, nat32, nat32, text, text, text, nat32) -> (
      opt ProposalOption,
    );
  update_proposal_options : (nat32, nat32, vec ProposalOption) -> (
      opt Proposal,
    );
  update_space : (nat32, text, text, text, nat32, nat32, nat32, nat, nat32) -> (
      opt Space,
    );
  update_space_proposals : (nat32, vec Proposal) -> ();
  update_strategies : (nat32, vec Strategy) -> ();
  update_vote : (nat32, nat32, nat32, nat32, text, nat32, nat64, text, nat) -> (
      opt ProposalOptionVote,
    );
  vote : (VoteData) -> (Result);
  voting_power : (text, nat32, opt text) -> (Result);
}
